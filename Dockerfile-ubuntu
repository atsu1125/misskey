FROM ubuntu:23.10 as builder

# Use bash for the shell
SHELL ["/bin/bash", "-c"]
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

ENV NODE_ENV=production

ENV NODE_VER="18.20.1"
RUN ARCH= && \
    dpkgArch="$(dpkg --print-architecture)" && \
  case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    ppc64el) ARCH='ppc64le';; \
    s390x) ARCH='s390x';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7l';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
  esac && \
    echo "Etc/UTC" > /etc/localtime && \
	apt-get update && \
	apt-get install -y --no-install-recommends build-essential ca-certificates wget apt-utils git && \
	cd ~ && \
	wget -q https://nodejs.org/download/release/v$NODE_VER/node-v$NODE_VER-linux-$ARCH.tar.gz && \
	tar xf node-v$NODE_VER-linux-$ARCH.tar.gz && \
	rm node-v$NODE_VER-linux-$ARCH.tar.gz && \
	mv node-v$NODE_VER-linux-$ARCH /opt/node

ENV PATH="${PATH}:/opt/node/bin"
WORKDIR /misskey

COPY package.json pnpm-lock.yaml ./

RUN corepack enable pnpm

RUN pnpm i --frozen-lockfile

COPY . ./

RUN pnpm build

FROM ubuntu:23.10

WORKDIR /misskey

# Copy over all the langs needed for runtime
COPY --from=builder /opt/node /opt/node

# Add more PATHs to the PATH
ENV PATH="${PATH}:/opt/node/bin"

# Install misskey runtime deps
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
RUN apt-get update && \
  apt-get -y --no-install-recommends install \
	  ffmpeg mecab mecab-ipadic-utf8 tini wget && \
	ln -s /opt/misskey /misskey && \
	rm -rf /var/cache && \
	rm -rf /var/lib/apt/lists/*

# Copy over misskey source, and dependencies from building
RUN corepack enable pnpm
COPY --from=builder /misskey/node_modules ./node_modules
COPY --from=builder /misskey/built ./built
COPY . ./

# Run misskey services in prod mode
ENV NODE_ENV="production"

# Set the container entry point
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["pnpm", "run", "start"]
